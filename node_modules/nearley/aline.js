// Generated automatically by nearley
// http://github.com/Hardmath123/nearley
(function () {
function id(x) {return x[0]; }


// line lexer: next delivers one line at a time
let lexer = {
    buffer: [],
	line: 0,
    reset: function(chunk, Info) {
		this.buffer = chunk.split("\n")
		this.line = Info || 0
	},
	next: function() {
		this.line++
		if (this.line-1 < this.buffer.length) {
		    return {
			  type: "line",
		      value: this.buffer[this.line-1]
		    }
		} else {
		   // End of input
		   return null
		}
    },
    save: function() {
	   return this.line
	},
    formatError: function(token) {
		return "Err: "+token
	},
    has: function(token_type) {
		//console.log("Parser asked for token type:",token_type)
		return token_type
	}
}
var grammar = {
    Lexer: lexer,
    ParserRules: [
    {"name": "main$ebnf$1", "symbols": []},
    {"name": "main$ebnf$1", "symbols": ["main$ebnf$1", "aline"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "main", "symbols": ["main$ebnf$1"], "postprocess": function(d) { return d[0] }},
    {"name": "aline", "symbols": [(lexer.has("line") ? {type: "line"} : line)], "postprocess": function(d) { return d[0].value }}
]
  , ParserStart: "main"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
